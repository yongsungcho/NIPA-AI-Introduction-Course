21.10.11
======================================================================================================================================

[01] List 활용
1. list.append(d) # . = "dot access"
  - 자료 d를 리스트 마지막 원소 뒤에 추가
  - 오직 한 개의 자료만 넣을 수 있다.
    
    a = []
    b = ['a', 'b', 'c']
    a.append(10)
    b.append('d')
    print(a,b) # [10] ['a', 'b', 'c', 'd']
    
2. list.insert(i,d)
  - 인덱스 i에 자료 d를 추가
  - 오직 한 개의 자료만 넣을 수 있다.
  
    c = [1, 2, 4, 5]
    c.insert(2,3)
    print(c) # [1, 2, 3, 4, 5]
    
3. list.remove(d)
  - 처음 나오는 자료 d를 제거 = 중복 시 인덱스가 작은 원소를 제거함
  
    d = [3, 1, 2, 3]
    d.remove(3)
    print(d) # [1, 2, 3]
    
4. list.sort()
  - 리스트를 정렬함. 숫자형은 오름차순, 문자열은 사전순
  
    e = [6, 2, 4, 1]
    f = ['carrot', 'apple', 'banana']
    e.sort()
    f.sort()
    print(e, f) # [1, 2, 4, 6] ['apple', 'banana', 'carrot']
    
======================================================================================================================================

[02] 시퀀스 자료형
1. 문자열 + 리스트 = 시퀀스 자료형
  - 순서가 있는 자료형!
    
    a = "Once" #문자열
    b = ['T', 'W', 'I', 'C', 'E'] #리스트
    c = (1, 2, 3, 4, 5) #튜플
    
  - 시퀀스의 특징
    1. 원소간의 순서가 존재함 (= 인덱싱/슬라이싱이 가능하다)
  
      a = "once"
      b = ['t', 'w', 'i', 'c', 'e']
      print(a[1]) # n
      print(b[2:4]) # ['i', 'c']

    2. 인덱싱/슬라이싱을 할 때 음수를 넣거나, 자리를 비우는 것도 가능함
    
      a = "once"
      b = ['t', 'w', 'i', 'c', 'e']
      print(a[-1]) #e | 뒤에서 1번째 원소
      print(b[:3]) #['t', 'w', 'i'] | 처음 ~ 3번째 슬라이싱
      
    3. 멤버 조회
      - in 연산자로 시퀀스 안에 원소가 있는지 확인이 가능함
      
        a = "once"
        b = ['t', 'w', 'i', 'c', 'e']
        print('o' in a) # True
        print('b' in b) # False
  
    4. 길이 확인
      - len 연산자로 시퀀스 안에 원소가 몇 개 인지 확인 가능
      
        a = "once"
        b = ['t', 'w', 'i', 'c', 'e']
        print(len(a)) # 4
        print(len(b)) # 5
        
    5. 연결 연산
      - "+" 연산자로 같은 시퀀스 두개를 이어 붙일 수 있다
      
        c = ['t', 'w', 'i'] + ['c', 'e']
        print(c) # ['t', 'w', 'i', 'c', 'e']
        
    6. 반복 연산
      - "*" 연산자로 시퀀스를 반복 할 수 있다
      
        d = "shy" * 3
        print(d) # shyshyshy
        
======================================================================================================================================

[03] Dictionary
1. Dictionary(사전): 짝꿍이 있는 자료형!
  - {}: 중괄호로 묶어서 표현
    
    dict_zero = {}
    person = {'name':'Michael', 'age':10}
  
  - {key : value}의 형식: key를 알면, value를 알 수 있음
    key: 열쇠처럼 자료를 꺼낼 수 있는 도구
    value: Dictionary에서 Key로 꺼낸 자료
    
  - Dictionary[key]: Dictionary에서 자료를 꺼내기
  
    person = {'name':'Michael', 'age':10}
    print(person['name']) # Michael
    print(person['age']) # 10
    
  - Dictionary[key]: Dictionary에서 자료를 추가하기
    
    person = {'name':'Michael', 'age':10}
    person['hometown'] = 'Seoul'
    
  - del: del 함수로 Dictionary의 원소 삭제
    
    person = {'name':'Michael', 'age':10}
    del person['age']
    print(person) # {'name':'Michael'}
  
2. Dictionary의 특징: Key는 변할 수 없는 자료형
  - "리스트"는 안되고, "튜플"은 된다!
    datas = {[1, 2, 3]}: 'Alphabet'} # Error
    datas = {(1, 2, 3)}: 'Alphabet'} # OK
    
======================================================================================================================================
