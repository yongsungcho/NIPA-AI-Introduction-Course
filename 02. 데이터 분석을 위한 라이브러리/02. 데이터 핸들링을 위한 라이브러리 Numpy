21.10.13
======================================================================================================================================

[01] Numpy란?
1. Numpy?
  - Numerical Python (수치적 파이썬)
  - Python에서 대규모, 다차원(2차원 이상) 배열을 다룰 수 있게 도와주는 라이브러리
    대표적인 라이브러리
      1) Pandas
      2) Numpy
      3) Matplotlib

2. 왜 Numpy를 사용하는가?
  - 데이터의 대부분은 숫자 배열로 볼 수 있다
  - 2X2표(2차원 데이터), 벡터(1차원 데이터)
  - 반복문 없이 배열 처리 가능
    -> 파이썬 리스트에 비해, 빠른 연산을 지원하고 메모리를 효율적으로 사용

3. Numpy 사용하기
  - list 배열 생성 및 출력 형태 확인
    
    ex) 0 ~ 4 까지 리스트 생성
    1) 리스트 사용(리스트)
      list_arr = list(range(5))
      print(list_arr) # [0, 1, 2, 3, 4] -> 콤마(,)로 구분
      print(type(list_arr)) # <class 'list'>
      => 1차원 배열로 나타남. 자료형 = list
    2) Numpy 사용(배열)
      import numpy as np # numpy 모듈 불러와서 'np' 별칭 부여
      np_arr = np.array(range(5))
      print(np_arr) # [0 1 2 3 4] -> 공백으로 구분
      print(type(np_arr)) # <class 'numpy.ndarray'> 
      => (ndarray = n차원의 배열). 자료형 = numpy.ndarray

======================================================================================================================================

[02] 배열의 기초
1. 배열의 데이터 타입 dtype
  - 파이썬 리스트와 달리 '같은 데이터 타입'만 저장 가능
    arr = np.array([0, 1, 2, 3, 4], dype = float)
    print(arr) # [0. 1. 2. 3. 4.]
    print(arr.dtype) # 'float64'
    print(arr.astype(int)) # [0 1 2 3 4]
    
2. 데이터 타입 dtype 종류
  - int (정수형 타입)
    다양한 표현: i, int_, int32, int64, i8
  - float (실수형 타입)
    다양한 표현: f, float_, float32, float64, f8
  - str (문자열 타입)
    str, U, U32
  - bool (부울 타입)
    ?, bool_
    
3. 배열의 속성
  - ndarray의 차원 관련 속성: ndim(차원) & shape(모양)
  - 1차원 배열.py
      list = [0, 1, 2, 3]
      arr = np.array(list)
      print(arr.ndim) # 1
      print(arr.shape) # (4,)
  - 2차원 배열.py
      list = [[0,1,2], [3,4,5]]
      arr = np.array(list)
      print(arr.ndim) # 2
      print(arr.shape) # (2,3)
  - ndarray의 크기 속성과 shape 조절
      arr = np.array([0, 1, 2, 3, 4, 5])
      print("arr.shape: {}".format(arr.shape)) # arr.shape: (6,))
      print("배열 요소의 수: {}".format(arr.size)) # 배열 요소의 수: 6
      print("배열의 길이: {}".format(len(arr))) # 배열의 길이: 6
        => 중괄호 = 그 안에 값을 기입해라
      arr.shape = 3, 2
      print("arr.shape: {}".format(arr.shape)) # arr.shape: (3,2))
      print("배열 요소의 수: {}".format(arr.size)) # 배열 요소의 수: 6
      print("배열의 길이: {}".format(len(arr))) # 배열의 길이: 3
      
======================================================================================================================================

[03] Indexing & Slicing
1. 찾고 잘라내기
  - indexing: 인덱스로 값을 찾아냄
      *** 첫 인덱스 값은 "0"!
      x = np.arange(7)
      print(X) # [0 1 2 3 4 5 6]
      print(x[3]) # [3]
      print(x[7]) # IndexError: index 7 is out of bounds
      x[0] = 10 # 0번째 데이터 변경
      print(x) # [10 1 2 3 4 5 6]
      
      x = np.arange(1, 13, 1)
      x.shape = 3, 4
      print(x) # [[ 1 2 3 4]
                  [ 5 6 7 8]
                  [ 9 10 11 12]]
      print(x[2,3]) # 12
   - slicing: 인덱스의 값으로 배열의 일부분을 가져옴
      x = np.arange(7)
      print(x) # [0 1 2 3 4 5 6]
      print(x[1:4]) # [1 2 3]
      print(x[1:]) # [1 2 3 4 5 6]
      print(x[:4]) # [0 1 2 3]
      print(x[::2]) # [0 2 4 6] (처음부터 끝까지, 2의 간격으로 불러와라)
      
      x = np.arange(1, 13, 1)
      x.shpae = 3, 4
      print(x) # [[ 1 2 3 4]
                  [ 5 6 7 8]
                  [ 9 10 11 12]]
      print(x[1:2, :2:3]) # [[5]]
      print(x[1:, :2] # [[ 5 6]
                         [ 9 10]]
    - Boolean indexing: 배열의 각 요소의 선택 여부를 Boolean mask를 이용하여 지정하는 방식
        x = np.arange(7) # Boolean mask? True, False로 구성된 mask array
        print(x) # [0 1 2 3 4 5 6]
        print(x < 3) # [True True True False False False False]
        print(x > 7) # [False False False False False False False]
      
        x = np.arange(7) # Boolean mask의 True 요소에 해당하는 index만을 조회
        print(x[x < 3]) # [0 1 2]
        print(x[x % 2 == 0]) # [0 2 4 6]
    - Fancy indexing: 배열의 각 요소 선택을 Index 배열을 전달하여 지정하는 방식
        x = np.arange(7)
        print(x) # [0 1 2 3 4 5 6]
        print(x[[1, 3, 5]]) # [1 3 5]
        
        x = np.arange(1, 13, 1).reshape(3, 4)
        print(x) # [[ 1 2 3 4]
                    [ 5 6 7 8]
                    [ 9 10 11 12]]
        print(x[[0, 2]]) # [[ 1 2 3 4]
                            [ 9 10 11 12]]
                            
    - Indexing x Slicing: 원하는 요소를 지정하기 위해 Indexing과 Slicing을 적절히 조합하여 사용 가능
        x = np.arange(1, 13, 1).reshape(3, 4)
        print(x) # [[ 1 2 3 4]
                    [ 5 6 7 8]
                    [ 9 10 11 12]]
        print(x[1:2, 2]) # [7]
        print(x[[0,2], 2]) # [ 3 11]
        print(x[[0,2], :2]) # [[ 1 2]
                               [ 9 10]]
                                     
======================================================================================================================================
