21.10.14
======================================================================================================================================

[01] Series 데이터
1. Pandas?
  - 파이썬 라이브러리
  - 구조화된 데이터를 효과적으로 처리하고 저장
  - Array 계산에 특화된 NumPy를 기반으로 설계
  - 행과 열을 가진 데이터, 대용량 데이터에 효과적 (엑셀과 비슷한 데이터 베이스 형태)

2. Series
  - Numpy의 array가 보강된 형태
  - Data & Index를 가지고 있음
      import pandas as pd
      data = pd.Series([1, 2, 3, 4])
      print(data)
  - Series는 값(values)을 ndarray 형태로 가지고 있음
      import pandas as pd
      data = pd.Series([1, 2, 3, 4])
      print(data)
      # 0 1 (왼쪽 = index, 오른쪽 = data)
      # 1 2
      # 2 3
      # 3 4
      # dtype: int64
      print(type(data)) # <class 'pandas.core.series.Series'>
      print(data.values) # [1 2 3 4]
      print(type(data.values)) # <class 'numpy.ndarray'>
  - dtype 인자로 데이터 타입을 지정할 수 있음
      data = pd.Series([1, 2, 3, 4], dtype = "float")
      print(data.dtype) # float64
      # 0 1
      # 1 2
      # 3 4
      # dtype: float64
  - 인덱스를 지정할 수 있고, 인덱스로 접근 가능
      data = pd.Series([1, 2, 3, 4], index = ['a', 'b', 'c', 'd'])
      data['c'] = 5 # 인덱스로 접근하여 요소 변경 가능
      # a 1
      # b 2
      # c 5
      # d 4
      # dtype: int64
  - Dictionary를 활용하여 Series 생성 가능
      population_dict = {
        'china': 141500,
        'japan': 12718,
        'korea': 5180,
        'usa': 32676
      }
      population = pd.Series(population_dict)
      => 인덱스 = 국가명 / 데이터 = 인구수 / dtype = int64

======================================================================================================================================

[02] 데이터프레임
1. Dataframe: 여러 개의 Series가 모여서 행과 열을 이룬 데이터
  - 예시
      gdp_dict = {
        'china': 1409250000,
        'japan': 516700000,
        'korea': 169320000,
        'usa': 2041280000,
      }
      gdp = pd.Series(gdp_dict)
      country = pd.DataFrame({
        'gdp': gdp,
        'population': population
      })
  - Dictionary를 활용하여 DataFrame 생성 가능
      data = {
        'country': ['china', 'japan', 'korea', 'usa'],
        'gdp': [1409250000, 516700000, 169320000, 2041280000],
        'population': [141500, 12718, 5180, 32676]
      }
      country = pd.DataFrame(data)
      country = country.set_index('country') # 나라 이름을 인덱스로 설정하기 위한 방법

2. DataFrame - 속성
  - DataFrame 속성을 확인하는 방법
      print(country.shape) # (4, 2) (이유: country = index, gdp & poplutation = column. 뚜껑이라고 생각하면 편함)
      print(country.size) # 8
      print(country.ndim) # 2
      print(country.values) # [[1409250000 141500]
                               [  516700000 12718]
                               [   169320000 5180]
                               [ 2041280000 32676]]
                               
3. DataFrame - index, columns 이름 지정
  - 데이터 프레임의 index와 column에 이름 지정
      country.index.name = "Country" # 인덱스에 이름 지정
      country.columns.name = "Info" # 컬럼에 이름 지정
      print(country.index) # Index(['china', 'japan', 'korea', 'usa'], dtype = 'object', name = 'Country')
      print(country.columns) # Index(['gdp', 'population'], dtype = 'object', name = 'info')

4. DataFrame - 저장 & 로드
  - 데이터 프레임 저장 및 불러오기 기능
      country.to_csv("./country.csv") # csv = Comma Separated Value
      country.to_excel("country.xlsx")
      
      country = pd.read_csv("./country.csv")
      country = pd.read_excel("country.xlsx")
      
======================================================================================================================================

[03] 데이터 선택 및 변형하기
1. 데이터 선택 - Indexing / Slicing
  - .loc: 명시적인 인덱스를 참조하는 인덱싱/슬라이싱. (loc: 명시적 location, iloc: 암묵적)
      country.loc['china'] # 인덱싱
      country.loc['japan':'korea', :'population'] # 슬라이싱, 처음 column부터 ~ population column까지
  - .iloc: 파이썬 스타일의 정수 인덱스 인덱싱/슬라이싱. (구체적인 index나 column의 이름을 모를때)
      country.iloc[0] # 인덱싱
      country.iloc[1:3, :2] # 슬라이싱

2. 데이터 선택 - 컬럼 선택
  - 컬럼명 활용하여 DataFrame에서 데이터 선택 가능
      country
      country['gdp'] # = Series
      country[['gdp']] # = DataFrame

3. 데이터 선택 - 조건 활용
  - Masking 연산이나 query 함수를 활용하여 조건에 맞는 DataFrame 행 추출 가능
      country[country['population'] < 10000] # masking 연산 활용
      country.query("population > 100000") # query 함수 활용

4. 데이터 변경 - 컬럼 추가
  - Series도 numpy array처럼 연산자 활용 가능
      gdp_per_capita = country['gdp'] / country['population']
      country['gdp per capita'] = gde_per_capita
  
5. 데이터 변경 - 데이터 추가/수정
  - 리스트로 추가 or 딕셔너리로 추가
      df = pd.DataFrame(columns = ['이름', '나이', '주소']) # 데이터프레임 생성
      df.loc[0] = ['길동', '26', '서울'] # 리스트로 데이터 추가
      df.loc[1] = {'이름':'철수', '나이':'25', '주소':'인천'} # 딕셔너리로 데이터 추가
      df.loc[1, '이름'] = '영희' # 명시적 인덱스 활용하여 데이터 수정
      
6. 데이터 변경 - NaN 컬럼 추가
  - NaN값으로 초기화 한 새로운 컬럼 추가
      df['전화번호'] = np.nan # 새로운 컬럼 추가 후 초기화
      df.loc[0, '전화번호'] = '01012341234' # 명시적 인덱스 활용하여 데이터 수정

7. 데이터 변경 - 컬럼 삭제
  - DataFrame에서 컬럼 삭제 후 원본 변경
      df.drop('전화번호', axis = 1, inplace = True) # 컬럼삭제
        # axis = 1: 열 방향 / axis = 0: 행 방향
        # inplace = True: 원본 변경 O / inplace = False: 원본 변경 X
        
======================================================================================================================================
